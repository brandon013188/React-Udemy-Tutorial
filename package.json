{
  "name": "react-complete-guide",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "radium": "^0.25.0",
    "react": "^16.6.1",
    "react-dom": "^16.6.1",
    "react-scripts": "2.1.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ]
}

// What does react-scripts eject do? 

// create-react-app encapsulates all of the npm modules it is using internally, 
// so that your package.json will be very clean and simple without you having to 
// worry about it. 

// However, if you want to start doing more complex things and 
// installing modules that may interact with modules create-react-app is using 
// under the hood, those new modules need to know what is available and not, 
// meaning you need to have create-react-app un-abstract them.

// That, in essence, is what react-scripts eject does. It will stop hiding what it's 
// got installed under the hood and instead eject those things into your project's 
// package.json for everyone to see.
